'''
Attempts to split text into questions and answers rather than breaking it up by speaker.
'''
from typing import List
from openai import OpenAI
import openai
import json
from dotenv import load_dotenv
import os
import json
import eng_spacysentiment as sentiment

load_dotenv()
KEY = os.getenv("OPENAI_API_KEY")
print(f"KEY: {KEY}")

class QAObjects():
    def __init__(self, question, answer):
        self.question = question
        self.answer = answer

    def analyze_sentiment(self, sentiment_analyzer):
        sentiment = sentiment_analyzer(self.get_question_and_answer())
        
        return sentiment
    
    def get_question_and_answer(self):
        return f"{self.question} {self.answer}"
    
    def __str__(self):
        return f"{self.question}\n{self.answer}"

def query_openai(input_file: str, output_file: str = None, model: str = "gpt-4o-mini") -> dict:
    '''
    Query the OpenAI API to split a conversation into question-answer pairs.

    Args:
        input_file (str): The path to the input file containing the conversation (json or txt file generated by whisperai).
        output_file (str): The path to the output file to write the question-answer pairs to (json file from openai).
        model (str): The OpenAI model to use for the query (open ai model to query).
    '''

    client = OpenAI(api_key=KEY)

    file_type = input_file.split(".")[-1]
    if file_type == "json":
        with open(input_file, "r") as f:
            text = json.load(f)["text"]
    elif file_type == "txt":
        with open(input_file, "r") as f:
            text = f.read()
    else:
        # assume text was passed in
        text = input_file
    print(f"text: {text}")

    # Define the prompt
    prompt = (
        "Your task is to take a conversation between a doctor and a patient and split it "
        "into question-answer pairs and label each speaker as either the doctor or patient. "
        "Each question-answer pair should be separated by a '|' "
        "and each pair should be on a new line. For example:"
        "Doctor: What is your name?|Patient: My name is John.\n"
    )

    # Interact with the API
    diarized_text = client.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": text},
        ]
    )

    response_dict = diarized_text.to_dict()
    if output_file is not None:
        with open(output_file, "w") as f:
            json.dump(response_dict, f)

    return response_dict

def create_qa_objects(openai_response: dict) -> List[QAObjects]:
    response = openai_response['choices'][0]['message']['content']
    qa_pairs = response.split("\n")
    QAs = []
    for qa_pair in qa_pairs:
        if not qa_pair.strip():
            continue
        print(f"qa_pair: {qa_pair}")
        question, answer = qa_pair.split("|")
        qa_object = QAObjects(question=question, answer=answer)
        QAs.append(qa_object)
    return QAs

def clean_with_openai(input_file: str, output_file: str, model: str = "gpt-4o-mini"):
    client = OpenAI(api_key=KEY)

    file_type = input_file.split(".")[-1]
    if file_type == "json":
        with open(input_file, "r") as f:
            text = json.load(f)["text"]
    elif file_type == "txt":
        with open(input_file, "r") as f:
            text = f.read()
    else:
        raise ValueError("Input file must be a json or txt file.")
    print(f"text: {text}")

    prompt = (
        "Your task is to take a conversation between a doctor and clean up any errors in the text."
    )

    clean_text = client.chat.completions.create(
        model=model,
        messages=[{
            "role": "system",
            "content": prompt
        },
        {
            "role": "user",
            "content": text
        }]
    )

    return clean_text

def perform_sentiment_analysis(openai_response: dict):
    '''
    takes the openai response and performs sentiment analysis on each question-answer pair.
    returns a dictionary with the counts of positive, negative, and neutral sentiments.
    '''
    sentiment_analyzer = sentiment.load()
    qas = create_qa_objects(openai_response)
    counts = {
        "positive": 0,
        "negative": 0,
        "neutral": 0
    }
    for qa in qas:
        sent = qa.analyze_sentiment(sentiment_analyzer).cats
        if sent["positive"] >= 0.75:
            counts["positive"] += 1
        elif sent["negative"] >= 0.75:
            counts["negative"] += 1
        else:
            counts["neutral"] += 1
    
    return counts

def perform_frequency_analysis(text: dict):
    '''
    given the text from whisperai, perform frequency analysis using the assistant elyssa made
    '''
    openai.organization = os.getenv("OPENAI_ORG")
    openai.api_key = KEY
    openai.project = os.getenv("OPENAI_PROJ")
    ASSISTANT_ID = os.getenv("OPENAI_ASST")
    thread = openai.beta.threads.create()
    openai.beta.threads.messages.create(
        thread_id=thread.id,
        role="user",
        content=text,
    )

    run = openai.beta.threads.runs.create(
        thread_id=thread.id,
        assistant_id=ASSISTANT_ID,
    )
    
    while True:
        run = openai.beta.threads.runs.retrieve(
            thread_id=thread.id,
            run_id=run.id,
        )
        if run.status in ["completed", "failed", "cancelled"]:
            break

    messages = openai.beta.threads.messages.list(thread_id=thread.id)
    response = None
    for m in reversed(messages.data):
        if m.role == "assistant":
            print(f"Assistant: {m.content}")
            response = m.content[0].dict()['text']['value']
            break
    try:
        clean_json_str = response.strip('` \n')[4:]  # removes "```json\\n"
    except:
        print("failed getting freq analysis")
        return None
    print("clean_json_str", clean_json_str)
    data = json.loads(clean_json_str)
    return data
    
if __name__ == "__main__":
    '''
    input_file = "test.json"
    output_file = "output-doc-pat.json"
    sentiment_output_file = "sentiment-doc-pat.txt"
    sentiment_analyzer = sentiment.load()
   
    openai_response = query_openai(input_file, output_file)
    """
    with open(output_file, "r") as f:
        openai_response = json.load(f)
    """
    counts = perform_sentiment_analysis(openai_response)
    print(f"Counts: {counts}")
    with open(sentiment_output_file, "a") as f:
        f.write(f"FINAL COUNTS: {counts}\n")
    '''
    x = perform_frequency_analysis("You're not a asking me this, but if there are really young people, I'll get all my stuff into your Stop, and I was like, you've always seen. Hi there, I'm Dr. Bella. Would you mind confirming your name in J.D.A.P. before we get started? Kevin Bacon, July 8th, 1958. Thank you, Mr. Bacon. What brings you into the clinic today? I have been having this horrible cough that just won't go away. I'm sorry to hear that. When did this cough start? About a week ago, it really started to get annoying. I see. And were you doing anything when the cough first started? No, not really. I was just at work and noticed a tickle in the back of my throat. And then I started coughing and haven't stopped since. Okay, and is your cough consistent throughout the day or does it seem to come and go? No, I would say it's consistent throughout the day. From the moment I get out of bed in the morning and stop coughing. Does anything seem to make your cough better or worse? I did notice that when I was on my morning run on the other day, I began cough really badly and I had to stop. Okay, so exercise makes it worse. Does anything make it better? No, not really. Okay, and is this cough dry or are you coughing at the ucus? Yeah, every now and then I would cough at some ucus. Okay, any pain or tightness in your chest? Yeah, I guess I do feel some tightness in my chest before I cough, but no pain really. All right, and have you been wheezing at all? Yes, actually I have noticed that when I lay down to go to bed at night, I start wheezing. Got it. And have you felt short of breath recently? No, I wouldn't say short of breath, just the occasional tightness in my chest. Any kind of fever, headache or chills? No, that I've noticed. Any fatigue or unintentional weight loss? Nope. Okay, any swelling or lumps around your neck or throat? Nope. Any recent infections or illnesses? No, I would say being good health lately. That's good to hear. Have you ever had a cough like this in the past? Um, yeah, I guess when I was a kid, I had asthma and I guess some, I would get coughs like this once every nine days, but I haven't had it like this in years. Okay, did you receive any kind of treatment? Yes, I saw a paul monologist who gave me some steroid, but I was told I could stop taking them so I did. I see. Let me go ahead and perform a physical exam.")
    print(x)
    with open("output.json", "w") as f:
        json.dump(x, f)
    
            